// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  angular.module('budweiserApp').controller('StudentLectureDetailCtrl', function($scope, $state, Restangular, Auth, $http, $upload, $location, notify, qiniuUtils, $tools, $rootScope, CurrentUser) {
    var findNextStamp, loadCourse, loadLecture, seekHashTimestamp;
    $rootScope.additionalMenu = [
      {
        title: '课程主页<i class="fa fa-home"></i>',
        link: "student.courseDetail({courseId:'" + $state.params.courseId + "'})",
        role: 'student'
      }, {
        title: '讨论<i class="fa fa-comments-o"></i>',
        link: "forum.course({courseId:'" + $state.params.courseId + "'})",
        role: 'student'
      }, {
        title: '统计<i class="fa fa-bar-chart-o"></i>',
        link: "student.courseStats({courseId:'" + $state.params.courseId + "'})",
        role: 'student'
      }
    ];
    $scope.$on('$destroy', function() {
      return $rootScope.additionalMenu = [];
    });
    loadLecture = function() {
      if ($state.params.lectureId && $state.params.lectureId === 'new') {
        return $scope.lecture = {
          courseId: $state.params.courseId
        };
      } else if ($state.params.lectureId) {
        return Restangular.one('lectures', $state.params.lectureId).get().then(function(lecture) {
          return $scope.lecture = lecture;
        });
      }
    };
    loadCourse = function() {
      return Restangular.one('courses', $state.params.courseId).get().then(function(course) {
        return $scope.course = course;
      });
    };
    angular.extend($scope, {
      lecture: null,
      course: null,
      me: CurrentUser,
      $stateParams: $state.params,
      saveLecture: function(lecture, form) {
        if (form.$valid) {
          if (!lecture._id) {
            return $scope.all('lectures').post(lecture, {
              courseId: $state.params.courseId
            }).then(function(data) {
              notify({
                message: '课时已保存',
                template: 'components/alert/success.html'
              });
              return $state.go('teacher.lectureDetail', {
                courseId: $state.params.courseId,
                lectureId: data._id
              });
            });
          } else {
            return lecture.put();
          }
        }
      },
      seek: function(timestamp) {
        var _ref;
        if ($scope.mediaPlayerAPI) {
          if (timestamp != null) {
            return (_ref = $scope.mediaPlayerAPI) != null ? _ref.seekTime(timestamp) : void 0;
          }
        }
      },
      currentTime: 0,
      isKeypointActive: function(keypoint) {
        var _ref;
        return $scope.currentTime >= keypoint.timestamp && ($scope.currentTime < ((_ref = findNextStamp(keypoint)) != null ? _ref.timestamp : void 0) || !findNextStamp(keypoint));
      },
      onUpdateTime: function(now, total) {
        return $scope.currentTime = now;
      },
      patchLecture: function() {
        var patch;
        if (!lecture._id) {
          return Restangular.all('lectures').post(lecture).then(function(data) {
            notify({
              message: '课时已保存',
              template: 'components/alert/success.html'
            });
            return $state.go('editLectureDetail', {
              lectureId: data._id
            });
          });
        } else {
          patch = {};
          patch[field] = lecture[field];
          return lecture.patch(patch).then(function(data) {
            angular.extend($scope.lecture, data);
            return notify({
              message: '课时已保存',
              template: 'components/alert/success.html'
            });
          });
        }
      },
      mediaPlayerAPI: void 0,
      onPlayerReady: function(playerAPI) {
        $scope.mediaPlayerAPI = playerAPI;
        return seekHashTimestamp();
      }
    });
    seekHashTimestamp = function() {
      var total, _ref;
      total = $tools.timeStrings2Seconds($location.hash());
      if (total != null) {
        return (_ref = $scope.mediaPlayerAPI) != null ? _ref.seekTime(total) : void 0;
      }
    };
    findNextStamp = function(keypoint) {
      var temp, _ref;
      temp = 1 ? (console.log(1), 1) : (console.log(2), 2);
      return (_ref = $scope.lecture.keyPoints.filter(function(item) {
        return item.timestamp > keypoint.timestamp;
      }).sort(function(a, b) {
        return a.timestamp >= b.timestamp;
      })) != null ? _ref[0] : void 0;
    };
    $scope.$watch('viewState', function(newVal) {
      if (!(newVal != null ? newVal.isVideo : void 0)) {
        return $scope.mediaPlayerAPI = void 0;
      }
    }, true);
    loadCourse();
    return loadLecture();
  });

}).call(this);
